

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String?
  password           String?
  role               String   @default("USER")
  googleRefreshToken  String?

  totalReplacements  Int      @default(0)          // Citas exitosamente llenadas
  totalCancellations Int      @default(0)          // Cancelaciones detectadas
  lastReplacementAt  DateTime?                     // Última cita recuperada
  lastCancellationAt DateTime?                     // Última cancelación detectada

  smsSent            Int      @default(0)          // Créditos usados en SMS
  emailSent          Int      @default(0)          // Créditos usados en Email

  connectedIntegration ConnectedIntegration?       // Relación 1:1 con integración
  preferences          UserPreference?  
  cancelationLogs  OpenSlot[]
  ReplacementLogs  ReplacementLog[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConnectedIntegration {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])

  provider        String                             // 'google', 'calendly', etc.
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime?
  scope           String?

  externalUserId  String?                            // ID del usuario en Google/Calendly/etc.
  externalOrgId   String?                            // Si aplica
  webhookId       String?                            // ID del webhook suscrito
  calendarId      String?                            // ID del calendario seleccionado
  spreadsheetId   String?                            // ID del Google Sheet compartido

  connectedAt     DateTime @default(now())
  disconnectedAt  DateTime?
}


model UserPreference {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])

  matchAppointmentType Boolean  @default(true)      // Si debe emparejar mismo tipo de cita
  notifyBeforeMinutes  Int?                         // Filtrar: solo si su cita futura está a más de X min
  notifyAfterMinutes   Int?                         // Filtrar: solo si su última cita fue hace más de X min
  maxNotificationsPerGap Int?                       // Por default: 10-20

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenSlot {
  id              String   @id @default(cuid())
  gapletSlotId    String   @unique                 // ID que usas en reply email (ej. UUID)
  provider        String                            // 'square' | 'acuity'
  providerBookingId String                         // ID original en el proveedor
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  startAt         DateTime
  durationMinutes Int
  teamMemberId    String
  serviceVariationId String
  locationId      String

  isTaken         Boolean  @default(false)
  createdAt       DateTime @default(now())
  takenAt         DateTime?
}
model ReplacementLog {
  id               String   @id @default(cuid())
  userId           String                      // Dueño de la cuenta (negocio)
  user             User     @relation(fields: [userId], references: [id])

  clientEmail      String                      // Cliente que respondió “I will take it”
  clientPhone      String?                     // Si está disponible
  clientName       String?                     // Si está disponible
  appointmentTime  DateTime                    // Hora del nuevo booking asignado
  provider         String                      // 'square' | 'acuity'
  providerBookingId String                     // ID de la nueva cita creada

  respondedAt      DateTime                    // Fecha del email de respuesta
  createdAt        DateTime @default(now())    // Fecha de la creación del nuevo booking
}




